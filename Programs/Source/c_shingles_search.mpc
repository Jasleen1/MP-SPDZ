program.bit_length = 64
print("program.bit_length: ", program.bit_length)
program.security = 40

from cshingles_dataset import cShinglesDataSet 
from fuzzy_string import FuzzyString, mimc_prf

from bitonic_sort import BitonicSort

from instructions import writesharestofile, readsharesfromfile

from util import *

import constants
import itertools
import sys


def generate_char_list():
	letter = sint(44)
	word = []
	for j in range(constants.STRING_LENGTH):
		word.append(letter)
	return word

def generate_dataset(number_of_points):
	data_raw = []
	for i in range(number_of_points):
		word = generate_char_list()
		data_raw.append(word)
	return cShinglesDataSet(data=data_raw)


def read_dataset(number_of_points):
	data = []
	shingles = []
	start_posn = regint(0)
	
	for i in range(number_of_points):
		posn = regint()
		shares = sint()
		readsharesfromfile(start_posn, posn, shares)
		data.append(shares)
		start_posn = posn
		shingle_array = Array(constants.cSHINGLES_LENGTH, sint)
		for j in range(constants.cSHINGLES_LENGTH):
			shingle_posn = regint()
			shingle_shares = sint()
			readsharesfromfile(start_posn, shingle_posn, shingle_shares)
			shingle_array[j] = shingle_shares
			start_posn = shingle_posn
		shingles.append(shingle_array)
	return cShinglesDataSet(data=data, shingles=shingles)

def setup_and_run_experiment(number_of_trials, dset=None, number_of_points=0):
	if dset == None:
		dset = generate_dataset(number_of_points)
	letter = cint(30)
	#letter2 = sint(30)
	word_ints = []
	for j in range(constants.STRING_LENGTH):
			word_ints.append(letter)
	word_shingles = FuzzyString.getClearShingles(word_ints, constants.STRING_LENGTH, constants.cSHINGLES)
	word_string = FuzzyString(word_ints, constants.STRING_LENGTH)
	
	# Comment and uncomment the experiment you want to run.
	# Make sure to reveal values you want to take measurements for, 
	# otherwise they may not get benchmarked.
	#run_shingles_experiment(dset, number_of_trials, word_string, word_shingles)
	#run_lcs_experiment(dset, number_of_trials, word_string, word_shingles)
	#run_sort_experiment(1, dset.data[0:number_of_points])
	run_experiment(dset, 1, word_string, word_shingles)
	
	return 

def run_experiment(dset, number_of_trials, fuzzy_str, word_shingles):
	for i in range(number_of_trials):
		found = dset.checkFuzzyMatch(fuzzy_str, word_shingles)
		print_ln("Found = %s", found.reveal())

def run_shingles_experiment(dset, number_of_trials, fuzzy_str, word_shingles):
	for i in range(number_of_trials):
		dist = dset.shinglesDist(word_shingles, dset.shingledData[0], constants.cSHINGLES_LENGTH)
		comp = dist.less_than(9, constants.MAX_SHINGLES_DIST_BITS)
		mul_val = dset.data[0] * comp
		print_ln("Found = %s", mul_val.reveal())
		#print_ln("Distance = %s", dist.reveal())

def run_lcs_experiment(dset, number_of_trials, fuzzy_str, word_shingles):
	for i in range(number_of_trials):
		dist = fuzzy_str.lcs_distance(dset.data[0], constants.STRING_LENGTH)
		comp = dist.less_than(constants.THRESHOLD, constants.MAX_DIST_BITS)
		print_ln("Found = %s", comp.reveal())

def run_sort_experiment(number_of_trials, points):
	for i in range(number_of_trials):
		BitonicSort.pushZerosToBack(points)
	print_ln("sum of points: %s", sum(points).reveal())

def setup_and_run_mimc(n):
	# Array of (duplicate) inputs
	A = Array(n, sint)
	for a in range(n):
		A[a] = sint(a)

	# Compute mimc
	zs = Array(n, sint)
	for i in range(n):
		zs[i] = mimc_prf(A[i], sint(i))
		print_ln('Computed %s as MIMC', zs[i].reveal())

def setup_and_run_mults(n):
	# Array of (duplicate) inputs
	A = Array(n, sint)
	for a in range(n):
		A[a] = sint(a)

	# Compute array of elements to multiply
	zs = Array(n, sint)
	for i in range(n):
		zs[i] = A[i] * sint(i)
	print_ln('Total prod  = %s ', sum(zs[i]).reveal())


num_read = int(sys.stdin.read())

dset = read_dataset(num_read)

setup_and_run_experiment(num_read, dset=dset, number_of_points=num_read)

### To run mimc benchmarks, comment out "setup_and_run_experiment" and uncomment below.
#setup_and_run_mimc(num_read)

